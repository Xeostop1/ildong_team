from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.common.by import By
from bs4 import BeautifulSoup
import time


user_agent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/103.0.0.0 Safari/537.36"
options = webdriver.ChromeOptions()
options.add_argument("--headless")
options.add_argument("--window-size=1920,1080")
options.add_argument("user-agent={}".format(user_agent))
browser = webdriver.Chrome(
    service=Service(ChromeDriverManager().install()), options=options
)

url = "https://www.agoda.com/ko-kr/"
browser.get(url)
browser.maximize_window()

destination = "시드니"
departure_date = "2023-06-24"
return_date = "2023-07-24"
loading_duration = 2
pages = 14


def close_ad():
    try:
        browser.find_element(By.CSS_SELECTOR, "button.ab-close-button").click()
    except Exception as e:
        pass


result_container = []

try:
    element = browser.find_element(By.CSS_SELECTOR, "input#textInput")
    print("input 엘리먼트 찾음")
    element.send_keys(destination)
    print(f'input 엘리먼트에 "{destination}" 입력')

    time.sleep(loading_duration)

    element = browser.find_element(By.CSS_SELECTOR, "ul.AutocompleteList").find_element(
        By.TAG_NAME, "li"
    )
    print("검색결과 li 엘리먼트 찾음")
    close_ad()
    browser.execute_script("arguments[0].click()", element)
    print("검색결과 li 엘리먼트 클릭")
    time.sleep(loading_duration)

    close_ad()

    time.sleep(loading_duration)
    # element = browser.find_element(
    #     By.XPATH, f'//div[contains(@class, "DayPicker-Caption-Wide")]'
    # )
    element = browser.find_element(By.CSS_SELECTOR, "div.DayPicker-Caption-Wide")

    departure_month = int(departure_date[5:7])
    return_month = int(return_date[5:7])
    datepicker_month = int(element.text[6:-1])

    month_difference_1 = 0
    month_difference_2 = 0

    if departure_month > datepicker_month:
        month_difference_1 = departure_month - datepicker_month

    if return_month > datepicker_month:
        month_difference_2 = return_month - datepicker_month

    if month_difference_1 != 0:
        element = browser.find_element(
            By.CSS_SELECTOR, 'span[data-selenium="calendar-next-month-button"]'
        )

        for i in range(month_difference_1):
            close_ad()
            browser.execute_script("arguments[0].click()", element)
            time.sleep(loading_duration)

    element = browser.find_element(
        By.CSS_SELECTOR, f'span[data-selenium-date="{departure_date}"]'
    )
    print(f"{departure_date} 엘리먼트 찾음")
    close_ad()
    browser.execute_script("arguments[0].click()", element)
    print(f"{departure_date} 엘리먼트 클릭")

    if month_difference_1 != month_difference_2:
        element = browser.find_element(
            By.CSS_SELECTOR, 'span[data-selenium="calendar-next-month-button"]'
        )

        for i in range(month_difference_2 - month_difference_1):
            browser.execute_script("arguments[0].click()", element)
            time.sleep(loading_duration)

    element = browser.find_element(
        By.CSS_SELECTOR, f'span[data-selenium-date="{return_date}"]'
    )
    print(f"{return_date} 엘리먼트 찾음")
    close_ad()
    browser.execute_script("arguments[0].click()", element)
    print(f"{return_date} 엘리먼트 클릭")

    element = browser.find_element(
        By.CSS_SELECTOR, 'button[data-element-name="search-button"]'
    )
    print("검색 버튼 엘리먼트 찾음")
    close_ad()
    browser.execute_script("arguments[0].click()", element)
    print("검색 버튼 엘리먼트 클릭")
    time.sleep(loading_duration * 3)

    close_ad()

    if len(browser.window_handles) == 2:
        browser.switch_to.window(browser.window_handles[1])

    time.sleep(loading_duration * 3)

    old_height = browser.execute_script("return document.documentElement.scrollHeight")
    scroll_y = 800
    number = 0

    while True:
        number += 1
        print(f"스크롤 다운 {number}회차")
        print("이전 웹문서 높이(px)", old_height)

        for i in range(5):
            browser.execute_script("window.scrollTo(0, arguments[0])", scroll_y)
            browser.execute_script("window.scrollTo(0, arguments[0])", scroll_y - 200)
            scroll_y += 800
            time.sleep(1)

        new_height = browser.execute_script(
            "return document.documentElement.scrollHeight"
        )

        if new_height == old_height:
            print("############## 스크롤 작업이 완료되었습니다. ##############")
            break

        old_height = new_height


except Exception as e:
    raise e

soup = BeautifulSoup(browser.page_source, "lxml")
elements = soup.find_all("ol", attrs={"class": "hotel-list-container"})

print(len(elements))

for element in elements:
    hotels = element.find_all("li", attrs={"data-selenium": "hotel-item"})

    print(len(hotels))

    for hotel in hotels:
        hotel_name = (
            hotel.find("h3", attrs={"data-selenium": "hotel-name"}).get_text().strip()
        )
        print(hotel_name)
